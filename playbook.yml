---
# Simple Conservative Ansible Playbook for Configuration Management Assignment
---
- name: Configure Development Environment
  hosts: all # This targets all hosts defined in your inventory.ini
  become: yes # This is crucial! Run all tasks with root privileges by default for system-wide changes.
  become_user: root # Explicitly become the root user

  tasks:
    - name: Update system packages # Ensures the system is up-to-date
      apt: # Uses the apt module for Debian/Ubuntu based systems
        update_cache: yes
        upgrade: dist
      # Note: For RHEL/CentOS, you'd use 'yum' or 'dnf' module instead of 'apt'

    - name: Log update status
      ansible.builtin.debug:
        msg: "System update completed"

    - name: Install common prerequisites (curl, git, build-essential)
      apt:
        name: "{{ item }}" # Loop through a list of packages
        state: present
      loop:
        - curl
        - git
        - build-essential # Essential for compiling some Node.js native modules
        - ca-certificates # Important for secure connections
      
    - name: Log basic packages installation
      ansible.builtin.debug:
        msg: "Basic packages installation completed"

    - name: Configure system to prefer IPv4 over IPv6 for DNS resolution
      # This helps prevent issues with some network configurations or services that prefer IPv6 but might have issues
      lineinfile:
        path: /etc/gai.conf
        regexp: '^#precedence ::ffff:0:0/96  100'
        line: 'precedence ::ffff:0:0/96  100'
        create: yes # Create the file if it doesn't exist
      # Note: If the line exists and is uncommented, this task will report 'ok', not 'changed'.

    - name: Add NodeSource GPG key
      # This step is required to securely add the Node.js repository
      ansible.builtin.shell: curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/nodesource.gpg >/dev/null
      args:
        creates: /etc/apt/keyrings/nodesource.gpg # Only run if the key isn't already there

    - name: Add NodeSource APT repository
      # This adds the official Node.js repository for a specific version (e.g., Node.js 18.x)
      ansible.builtin.shell: echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list >/dev/null
      args:
        creates: /etc/apt/sources.list.d/nodesource.list
      # Important: Change 'node_18.x' to your desired Node.js version (e.g., node_20.x, node_22.x)

    - name: Update apt cache after adding NodeSource repo
      apt:
        update_cache: yes

    - name: Install Node.js and npm
      apt:
        name: nodejs # Installs Node.js which includes npm
        state: present

    - name: Log Node.js installation
      ansible.builtin.debug:
        msg: "Node.js installation completed"

    - name: Get Node.js version
      ansible.builtin.command: node --version
      register: node_version_output
      changed_when: false # This command doesn't change anything, so don't report as 'changed'

    - name: Log Node.js version
      ansible.builtin.debug:
        msg: "Node.js version: {{ node_version_output.stdout }}"

    - name: Install pm2 globally
      community.general.npm: # Using the dedicated 'npm' module is cleaner than a raw 'shell' command
        name: pm2
        global: yes
        state: present # Ensure it's installed
        # The 'become: yes' at the playbook level handles permissions for this task
        # No need for specific 'sudo' commands within the npm module as 'become' handles it.

    - name: Log pm2 installation
      ansible.builtin.debug:
        msg: "pm2 installation completed globally"

    # Example: If you needed to install other global npm packages
    # - name: Install another_global_package globally
    #   community.general.npm:
    #     name: another_global_package
    #     global: yes
    #     state: present

    # Add more tasks here for your application setup, e.g.:
    # - name: Copy application files
    #   ansible.builtin.copy:
    #     src: /path/to/your/local/app
    #     dest: /opt/your-app
    #     mode: '0755'
    #     owner: ubuntu # Assuming your application runs as 'ubuntu'

    # - name: Install application dependencies
    #   community.general.npm:
    #     path: /opt/your-app
    #     state: present # Or 'latest' for re-running npm install
    #   become: no # Usually, app dependencies are installed as the app user, not root
    #   become_user: ubuntu # Assuming your app user is 'ubuntu'

    # - name: Start application with pm2
    #   ansible.builtin.command: pm2 start /opt/your-app/app.js # Adjust path to your main app file
    #   args:
    #     chdir: /opt/your-app
    #   # The 'pm2' command should be in the PATH due to global npm install.
    #   # If 'pm2' still isn't found, you might need to specify the full path: /usr/bin/pm2